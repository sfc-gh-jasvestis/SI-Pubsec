-- Weather-Service Integration for Singapore Smart Nation Intelligence Demo
-- Demonstrates correlation between weather patterns and citizen service usage
-- Based on Snowflake's time-series data analysis capabilities

USE ROLE SNOWFLAKE_INTELLIGENCE_ADMIN;
USE DATABASE SNOWFLAKE_PUBSEC_DEMO;
USE WAREHOUSE SNOWFLAKE_DEMO_WH;

-- Create comprehensive weather-service correlation views
-- This integrates weather data with citizen service interactions

-- 1. WEATHER IMPACT ON SERVICE USAGE PATTERNS
CREATE OR REPLACE VIEW SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.WEATHER_SERVICE_CORRELATION AS
WITH HOURLY_WEATHER AS (
    -- Aggregate weather data by hour and region
    SELECT 
        DATE_TRUNC('hour', DATE_TIME) as HOUR_TIMESTAMP,
        CASE 
            WHEN LOCATION IN ('Changi', 'Paya Lebar') THEN 'East'
            WHEN LOCATION IN ('Jurong West', 'Choa Chu Kang') THEN 'West'
            WHEN LOCATION IN ('Woodlands', 'Ang Mo Kio') THEN 'North'
            WHEN LOCATION IN ('Marina Barrage', 'Orchard', 'Tanjong Pagar') THEN 'Central'
            ELSE 'South'
        END as REGION,
        AVG(TEMPERATURE_C) as AVG_TEMP_C,
        AVG(HUMIDITY_PCT) as AVG_HUMIDITY,
        SUM(RAINFALL_MM) as TOTAL_RAINFALL,
        MAX(CASE WHEN ALERT_LEVEL != 'Normal' THEN 1 ELSE 0 END) as WEATHER_ALERT_FLAG,
        MODE(WEATHER_CONDITION) as DOMINANT_WEATHER
    FROM SNOWFLAKE_PUBSEC_DEMO.EXTERNAL_DATA.WEATHER_DATA
    GROUP BY 1, 2
),

HOURLY_SERVICES AS (
    -- Aggregate service interactions by hour
    SELECT 
        DATE_TRUNC('hour', si.INTERACTION_TIMESTAMP) as HOUR_TIMESTAMP,
        -- Map postal districts to regions for correlation
        CASE 
            WHEN cp.POSTAL_DISTRICT IN ('District 16-20') THEN 'East'
            WHEN cp.POSTAL_DISTRICT IN ('District 21-28') THEN 'West'  
            WHEN cp.POSTAL_DISTRICT IN ('District 21-28') THEN 'North'  -- Simplified mapping
            WHEN cp.POSTAL_DISTRICT IN ('District 01-05', 'District 06-10', 'District 11-15') THEN 'Central'
            ELSE 'Central'  -- Default to central
        END as REGION,
        si.SERVICE_TYPE,
        si.AGENCY,
        si.INTERACTION_CHANNEL,
        COUNT(*) as INTERACTION_COUNT,
        AVG(si.DURATION_MINUTES) as AVG_DURATION,
        SUM(CASE WHEN si.SUCCESS_FLAG THEN 1 ELSE 0 END) as SUCCESS_COUNT,
        AVG(si.SATISFACTION_RATING) as AVG_SATISFACTION,
        COUNT(CASE WHEN si.INTERACTION_CHANNEL = 'Mobile App' THEN 1 END) as MOBILE_COUNT,
        COUNT(CASE WHEN si.INTERACTION_CHANNEL = 'Service Center' THEN 1 END) as IN_PERSON_COUNT
    FROM SNOWFLAKE_PUBSEC_DEMO.SERVICES.SERVICE_INTERACTIONS si
    JOIN SNOWFLAKE_PUBSEC_DEMO.CITIZEN_DATA.CITIZEN_PROFILES cp ON si.CITIZEN_ID = cp.CITIZEN_ID
    WHERE si.INTERACTION_TIMESTAMP >= DATEADD(day, -90, CURRENT_TIMESTAMP())
    GROUP BY 1, 2, 3, 4, 5
)

SELECT 
    hw.HOUR_TIMESTAMP,
    hw.REGION,
    hw.AVG_TEMP_C,
    hw.AVG_HUMIDITY,
    hw.TOTAL_RAINFALL,
    hw.WEATHER_ALERT_FLAG,
    hw.DOMINANT_WEATHER,
    
    hs.SERVICE_TYPE,
    hs.AGENCY,
    hs.INTERACTION_CHANNEL,
    hs.INTERACTION_COUNT,
    hs.AVG_DURATION,
    hs.SUCCESS_COUNT,
    hs.AVG_SATISFACTION,
    hs.MOBILE_COUNT,
    hs.IN_PERSON_COUNT,
    
    -- Calculate weather impact metrics
    CASE 
        WHEN hw.TOTAL_RAINFALL > 10 THEN 'Heavy Rain Impact'
        WHEN hw.TOTAL_RAINFALL > 2 THEN 'Light Rain Impact'
        WHEN hw.AVG_TEMP_C > 32 THEN 'High Temperature Impact'
        WHEN hw.WEATHER_ALERT_FLAG = 1 THEN 'Weather Alert Impact'
        ELSE 'Normal Weather'
    END as WEATHER_IMPACT_CATEGORY,
    
    -- Service adaptation score (higher mobile usage during bad weather)
    CASE 
        WHEN hs.MOBILE_COUNT > 0 THEN 
            ROUND((hs.MOBILE_COUNT * 100.0) / hs.INTERACTION_COUNT, 2)
        ELSE 0 
    END as MOBILE_ADOPTION_PCT,
    
    -- Weather resilience score
    CASE 
        WHEN hw.TOTAL_RAINFALL > 5 AND hs.SUCCESS_COUNT > 0 THEN
            ROUND((hs.SUCCESS_COUNT * 100.0) / hs.INTERACTION_COUNT, 2)
        ELSE NULL
    END as WEATHER_RESILIENCE_SCORE

FROM HOURLY_WEATHER hw
LEFT JOIN HOURLY_SERVICES hs 
    ON hw.HOUR_TIMESTAMP = hs.HOUR_TIMESTAMP 
    AND hw.REGION = hs.REGION
WHERE hs.INTERACTION_COUNT IS NOT NULL;

-- 2. WEATHER ALERT IMPACT ON EMERGENCY SERVICES
CREATE OR REPLACE VIEW SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.WEATHER_EMERGENCY_RESPONSE AS
WITH WEATHER_ALERTS AS (
    SELECT 
        DATE_TRUNC('day', DATE_TIME) as ALERT_DATE,
        COUNT(CASE WHEN ALERT_LEVEL IN ('Warning', 'Red Alert') THEN 1 END) as SEVERE_ALERT_HOURS,
        MAX(RAINFALL_MM) as MAX_RAINFALL,
        AVG(TEMPERATURE_C) as AVG_TEMPERATURE,
        COUNT(CASE WHEN WEATHER_CONDITION = 'Thunderstorm' THEN 1 END) as THUNDERSTORM_HOURS
    FROM SNOWFLAKE_PUBSEC_DEMO.EXTERNAL_DATA.WEATHER_DATA
    GROUP BY 1
),

EMERGENCY_SERVICES AS (
    SELECT 
        DATE(si.INTERACTION_TIMESTAMP) as SERVICE_DATE,
        COUNT(CASE WHEN si.SERVICE_TYPE IN ('Healthcare Appointment', 'Social Services') THEN 1 END) as EMERGENCY_SERVICES,
        COUNT(CASE WHEN si.INTERACTION_CHANNEL = 'Phone' THEN 1 END) as PHONE_CALLS,
        AVG(si.DURATION_MINUTES) as AVG_RESPONSE_TIME,
        COUNT(CASE WHEN si.SUCCESS_FLAG = FALSE THEN 1 END) as FAILED_SERVICES
    FROM SNOWFLAKE_PUBSEC_DEMO.SERVICES.SERVICE_INTERACTIONS si
    WHERE si.INTERACTION_TIMESTAMP >= DATEADD(day, -90, CURRENT_TIMESTAMP())
    GROUP BY 1
)

SELECT 
    wa.ALERT_DATE,
    wa.SEVERE_ALERT_HOURS,
    wa.MAX_RAINFALL,
    wa.AVG_TEMPERATURE,
    wa.THUNDERSTORM_HOURS,
    
    es.EMERGENCY_SERVICES,
    es.PHONE_CALLS,
    es.AVG_RESPONSE_TIME,
    es.FAILED_SERVICES,
    
    -- Calculate correlation metrics
    CASE 
        WHEN wa.SEVERE_ALERT_HOURS > 0 THEN 'Weather Alert Day'
        WHEN wa.MAX_RAINFALL > 20 THEN 'Heavy Rain Day'
        WHEN wa.THUNDERSTORM_HOURS > 2 THEN 'Storm Day'
        ELSE 'Normal Weather Day'
    END as WEATHER_CATEGORY,
    
    -- Emergency response effectiveness during weather events
    CASE 
        WHEN wa.SEVERE_ALERT_HOURS > 0 AND es.EMERGENCY_SERVICES > 0 THEN
            ROUND((es.EMERGENCY_SERVICES - es.FAILED_SERVICES) * 100.0 / es.EMERGENCY_SERVICES, 2)
        ELSE NULL
    END as EMERGENCY_SUCCESS_RATE

FROM WEATHER_ALERTS wa
LEFT JOIN EMERGENCY_SERVICES es ON wa.ALERT_DATE = es.SERVICE_DATE;

-- 3. SEASONAL WEATHER IMPACT ON POLICY EFFECTIVENESS
CREATE OR REPLACE VIEW SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.SEASONAL_POLICY_WEATHER_IMPACT AS
WITH MONTHLY_WEATHER AS (
    SELECT 
        DATE_TRUNC('month', DATE_TIME) as MONTH_YEAR,
        EXTRACT(MONTH FROM DATE_TIME) as MONTH_NUM,
        CASE 
            WHEN EXTRACT(MONTH FROM DATE_TIME) IN (11, 12, 1, 2, 3) THEN 'Monsoon Season'
            ELSE 'Dry Season'
        END as SEASON,
        AVG(TEMPERATURE_C) as AVG_TEMP,
        AVG(HUMIDITY_PCT) as AVG_HUMIDITY,
        SUM(RAINFALL_MM) as TOTAL_RAINFALL,
        COUNT(CASE WHEN ALERT_LEVEL != 'Normal' THEN 1 END) as ALERT_HOURS
    FROM SNOWFLAKE_PUBSEC_DEMO.EXTERNAL_DATA.WEATHER_DATA
    GROUP BY 1, 2, 3
),

MONTHLY_SERVICES AS (
    SELECT 
        DATE_TRUNC('month', si.INTERACTION_TIMESTAMP) as MONTH_YEAR,
        COUNT(*) as TOTAL_INTERACTIONS,
        AVG(cp.DIGITAL_LITERACY_SCORE) as AVG_DIGITAL_LITERACY,
        COUNT(CASE WHEN si.INTERACTION_CHANNEL = 'Mobile App' THEN 1 END) as MOBILE_USAGE,
        COUNT(CASE WHEN cp.AGE_GROUP = '65+' THEN 1 END) as SENIOR_INTERACTIONS,
        AVG(si.SATISFACTION_RATING) as AVG_SATISFACTION
    FROM SNOWFLAKE_PUBSEC_DEMO.SERVICES.SERVICE_INTERACTIONS si
    JOIN SNOWFLAKE_PUBSEC_DEMO.CITIZEN_DATA.CITIZEN_PROFILES cp ON si.CITIZEN_ID = cp.CITIZEN_ID
    GROUP BY 1
),

POLICY_IMPACT AS (
    SELECT 
        DATE_TRUNC('month', pi.IMPLEMENTATION_DATE) as POLICY_MONTH,
        AVG(pi.IMPACT_PERCENTAGE) as AVG_POLICY_IMPACT,
        COUNT(*) as POLICIES_IMPLEMENTED
    FROM SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.POLICY_IMPACT pi
    GROUP BY 1
)

SELECT 
    mw.MONTH_YEAR,
    mw.MONTH_NUM,
    mw.SEASON,
    mw.AVG_TEMP,
    mw.AVG_HUMIDITY,
    mw.TOTAL_RAINFALL,
    mw.ALERT_HOURS,
    
    ms.TOTAL_INTERACTIONS,
    ms.AVG_DIGITAL_LITERACY,
    ms.MOBILE_USAGE,
    ms.SENIOR_INTERACTIONS,
    ms.AVG_SATISFACTION,
    
    pi.AVG_POLICY_IMPACT,
    pi.POLICIES_IMPLEMENTED,
    
    -- Weather adaptation metrics
    CASE 
        WHEN ms.MOBILE_USAGE > 0 THEN 
            ROUND((ms.MOBILE_USAGE * 100.0) / ms.TOTAL_INTERACTIONS, 2)
        ELSE 0 
    END as MOBILE_ADOPTION_RATE,
    
    -- Seasonal effectiveness score
    CASE 
        WHEN mw.SEASON = 'Monsoon Season' THEN
            ROUND(ms.AVG_SATISFACTION * (ms.MOBILE_USAGE * 1.0 / ms.TOTAL_INTERACTIONS), 2)
        ELSE ms.AVG_SATISFACTION
    END as WEATHER_ADJUSTED_SATISFACTION

FROM MONTHLY_WEATHER mw
LEFT JOIN MONTHLY_SERVICES ms ON mw.MONTH_YEAR = ms.MONTH_YEAR
LEFT JOIN POLICY_IMPACT pi ON mw.MONTH_YEAR = pi.POLICY_MONTH;

-- 4. REAL-TIME WEATHER SERVICE DASHBOARD
CREATE OR REPLACE VIEW SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.WEATHER_SERVICE_DASHBOARD AS
WITH CURRENT_WEATHER AS (
    SELECT 
        LOCATION,
        TEMPERATURE_C,
        HUMIDITY_PCT,
        RAINFALL_MM,
        WEATHER_CONDITION,
        ALERT_LEVEL,
        ROW_NUMBER() OVER (PARTITION BY LOCATION ORDER BY DATE_TIME DESC) as RN
    FROM SNOWFLAKE_PUBSEC_DEMO.EXTERNAL_DATA.WEATHER_DATA
),

RECENT_SERVICES AS (
    SELECT 
        COUNT(*) as CURRENT_HOUR_INTERACTIONS,
        AVG(DURATION_MINUTES) as AVG_RESPONSE_TIME,
        COUNT(CASE WHEN SUCCESS_FLAG THEN 1 END) as SUCCESSFUL_INTERACTIONS,
        COUNT(CASE WHEN INTERACTION_CHANNEL = 'Mobile App' THEN 1 END) as MOBILE_INTERACTIONS
    FROM SNOWFLAKE_PUBSEC_DEMO.SERVICES.SERVICE_INTERACTIONS
    WHERE INTERACTION_TIMESTAMP >= DATEADD(hour, -1, CURRENT_TIMESTAMP())
),

SERVICE_ALERTS AS (
    SELECT 
        COUNT(CASE WHEN PERFORMANCE_STATUS = 'Below' THEN 1 END) as UNDERPERFORMING_SERVICES,
        AVG(METRIC_VALUE) as AVG_PERFORMANCE
    FROM SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.SERVICE_PERFORMANCE
    WHERE MEASUREMENT_DATE = CURRENT_DATE()
)

SELECT 
    'Weather Service Impact Dashboard' as DASHBOARD_TYPE,
    CURRENT_TIMESTAMP() as LAST_UPDATED,
    
    -- Current weather summary
    (SELECT COUNT(CASE WHEN ALERT_LEVEL != 'Normal' THEN 1 END) 
     FROM CURRENT_WEATHER WHERE RN = 1) as ACTIVE_WEATHER_ALERTS,
    
    (SELECT AVG(RAINFALL_MM) 
     FROM CURRENT_WEATHER WHERE RN = 1) as CURRENT_AVG_RAINFALL,
    
    (SELECT COUNT(CASE WHEN WEATHER_CONDITION IN ('Heavy Rain', 'Thunderstorm') THEN 1 END)
     FROM CURRENT_WEATHER WHERE RN = 1) as SEVERE_WEATHER_LOCATIONS,
    
    -- Service impact metrics
    rs.CURRENT_HOUR_INTERACTIONS,
    rs.AVG_RESPONSE_TIME,
    rs.SUCCESSFUL_INTERACTIONS,
    rs.MOBILE_INTERACTIONS,
    
    -- Performance alerts
    sa.UNDERPERFORMING_SERVICES,
    sa.AVG_PERFORMANCE,
    
    -- Weather adaptation score
    CASE 
        WHEN rs.CURRENT_HOUR_INTERACTIONS > 0 THEN
            ROUND((rs.MOBILE_INTERACTIONS * 100.0) / rs.CURRENT_HOUR_INTERACTIONS, 2)
        ELSE 0
    END as CURRENT_MOBILE_ADOPTION_PCT,
    
    -- Overall weather resilience
    CASE 
        WHEN rs.SUCCESSFUL_INTERACTIONS > 0 AND rs.CURRENT_HOUR_INTERACTIONS > 0 THEN
            ROUND((rs.SUCCESSFUL_INTERACTIONS * 100.0) / rs.CURRENT_HOUR_INTERACTIONS, 2)
        ELSE 0
    END as CURRENT_SUCCESS_RATE

FROM RECENT_SERVICES rs
CROSS JOIN SERVICE_ALERTS sa;

-- Grant permissions on all new views
GRANT SELECT ON SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.WEATHER_SERVICE_CORRELATION TO ROLE SNOWFLAKE_INTELLIGENCE_ADMIN;
GRANT SELECT ON SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.WEATHER_EMERGENCY_RESPONSE TO ROLE SNOWFLAKE_INTELLIGENCE_ADMIN;
GRANT SELECT ON SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.SEASONAL_POLICY_WEATHER_IMPACT TO ROLE SNOWFLAKE_INTELLIGENCE_ADMIN;
GRANT SELECT ON SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.WEATHER_SERVICE_DASHBOARD TO ROLE SNOWFLAKE_INTELLIGENCE_ADMIN;

-- Create sample queries for Cortex Analyst demonstrations
SELECT 'Weather-Service Integration completed successfully!' as STATUS,
       'Ready for advanced correlation analysis with Cortex Analyst' as NEXT_STEP;

-- Verification queries to test the integration
SELECT 'Testing Weather-Service Correlation View...' as TEST;
SELECT COUNT(*) as CORRELATION_RECORDS 
FROM SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.WEATHER_SERVICE_CORRELATION 
LIMIT 5;

SELECT 'Testing Weather Emergency Response View...' as TEST;
SELECT COUNT(*) as EMERGENCY_RECORDS 
FROM SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.WEATHER_EMERGENCY_RESPONSE 
LIMIT 5;

SELECT 'Testing Seasonal Policy Weather Impact View...' as TEST;
SELECT COUNT(*) as SEASONAL_RECORDS 
FROM SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.SEASONAL_POLICY_WEATHER_IMPACT 
LIMIT 5;

SELECT 'Testing Weather Service Dashboard...' as TEST;
SELECT * FROM SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.WEATHER_SERVICE_DASHBOARD;
