-- Cortex Analyst Setup for Singapore Smart Nation Intelligence Demo
-- Adds semantic models and Cortex Analyst capabilities to the demo

USE ROLE SNOWFLAKE_INTELLIGENCE_ADMIN;
USE DATABASE SNOWFLAKE_PUBSEC_DEMO;
USE WAREHOUSE SNOWFLAKE_DEMO_WH;


-- Create stage for semantic model files
CREATE STAGE IF NOT EXISTS SNOWFLAKE_PUBSEC_DEMO.SEMANTIC_MODELS.ANALYST_STAGE
    COMMENT = 'Stage for Cortex Analyst semantic model YAML files';

-- Grant necessary privileges for Cortex Analyst
GRANT USAGE ON SCHEMA SNOWFLAKE_PUBSEC_DEMO.SEMANTIC_MODELS TO ROLE SNOWFLAKE_INTELLIGENCE_ADMIN;
GRANT READ ON STAGE SNOWFLAKE_PUBSEC_DEMO.SEMANTIC_MODELS.ANALYST_STAGE TO ROLE SNOWFLAKE_INTELLIGENCE_ADMIN;

-- Create semantic model for Singapore Citizen Services Analytics
CREATE OR REPLACE FILE FORMAT SNOWFLAKE_PUBSEC_DEMO.SEMANTIC_MODELS.YAML_FORMAT
    TYPE = 'CSV'
    FIELD_DELIMITER = NONE
    RECORD_DELIMITER = NONE
    SKIP_HEADER = 0
    FIELD_OPTIONALLY_ENCLOSED_BY = NONE
    ESCAPE_UNENCLOSED_FIELD = NONE
    COMMENT = 'File format for YAML semantic model files';

-- Put the semantic model file content into the stage
-- This would normally be done via PUT command, but we'll create it directly

-- Create a view that combines citizen data with service performance for Cortex Analyst
CREATE OR REPLACE VIEW SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.CITIZEN_SERVICE_ANALYTICS AS
SELECT 
    -- Citizen demographics
    cp.AGE_GROUP,
    cp.POSTAL_DISTRICT,
    cp.PREFERRED_LANGUAGE,
    cp.DIGITAL_LITERACY_SCORE,
    cp.SERVICE_USAGE_FREQUENCY,
    cp.SATISFACTION_SCORE as CITIZEN_SATISFACTION,
    
    -- Service interaction data
    si.SERVICE_TYPE,
    si.AGENCY,
    si.INTERACTION_CHANNEL,
    si.DURATION_MINUTES,
    si.SUCCESS_FLAG,
    si.SATISFACTION_RATING as INTERACTION_SATISFACTION,
    DATE(si.INTERACTION_TIMESTAMP) as INTERACTION_DATE,
    EXTRACT(MONTH FROM si.INTERACTION_TIMESTAMP) as INTERACTION_MONTH,
    EXTRACT(YEAR FROM si.INTERACTION_TIMESTAMP) as INTERACTION_YEAR,
    EXTRACT(DOW FROM si.INTERACTION_TIMESTAMP) as DAY_OF_WEEK,
    EXTRACT(HOUR FROM si.INTERACTION_TIMESTAMP) as HOUR_OF_DAY,
    
    -- Calculated metrics
    CASE WHEN si.SUCCESS_FLAG THEN 1 ELSE 0 END as SUCCESS_COUNT,
    CASE WHEN si.SUCCESS_FLAG THEN 0 ELSE 1 END as FAILURE_COUNT,
    1 as INTERACTION_COUNT,
    
    -- Performance categories
    CASE 
        WHEN si.DURATION_MINUTES <= 5 THEN 'Fast'
        WHEN si.DURATION_MINUTES <= 15 THEN 'Moderate'
        WHEN si.DURATION_MINUTES <= 30 THEN 'Slow'
        ELSE 'Very Slow'
    END as RESPONSE_TIME_CATEGORY,
    
    CASE 
        WHEN si.SATISFACTION_RATING >= 4 THEN 'High'
        WHEN si.SATISFACTION_RATING >= 3 THEN 'Medium'
        ELSE 'Low'
    END as SATISFACTION_CATEGORY

FROM SNOWFLAKE_PUBSEC_DEMO.CITIZEN_DATA.CITIZEN_PROFILES cp
JOIN SNOWFLAKE_PUBSEC_DEMO.SERVICES.SERVICE_INTERACTIONS si 
    ON cp.CITIZEN_ID = si.CITIZEN_ID;

-- Create aggregated view for policy impact analysis
CREATE OR REPLACE VIEW SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.POLICY_PERFORMANCE_ANALYTICS AS
SELECT 
    pi.POLICY_NAME,
    pi.IMPLEMENTATION_DATE,
    pi.TARGET_DEMOGRAPHIC,
    pi.BASELINE_METRIC,
    pi.CURRENT_METRIC,
    pi.IMPACT_PERCENTAGE,
    pi.STATUS as POLICY_STATUS,
    
    -- Time dimensions
    EXTRACT(YEAR FROM pi.IMPLEMENTATION_DATE) as IMPLEMENTATION_YEAR,
    EXTRACT(MONTH FROM pi.IMPLEMENTATION_DATE) as IMPLEMENTATION_MONTH,
    DATEDIFF(day, pi.IMPLEMENTATION_DATE, CURRENT_DATE()) as DAYS_SINCE_IMPLEMENTATION,
    
    -- Performance categories
    CASE 
        WHEN pi.IMPACT_PERCENTAGE >= 50 THEN 'Highly Successful'
        WHEN pi.IMPACT_PERCENTAGE >= 25 THEN 'Successful'
        WHEN pi.IMPACT_PERCENTAGE >= 10 THEN 'Moderately Successful'
        ELSE 'Needs Improvement'
    END as SUCCESS_CATEGORY,
    
    -- ROI calculation
    (pi.CURRENT_METRIC - pi.BASELINE_METRIC) as ABSOLUTE_IMPROVEMENT,
    CASE 
        WHEN pi.BASELINE_METRIC > 0 
        THEN ((pi.CURRENT_METRIC - pi.BASELINE_METRIC) / pi.BASELINE_METRIC) * 100
        ELSE 0 
    END as ROI_PERCENTAGE

FROM SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.POLICY_IMPACT pi;

-- Create service performance summary for Cortex Analyst
CREATE OR REPLACE VIEW SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.SERVICE_PERFORMANCE_ANALYTICS AS
SELECT 
    sp.SERVICE_NAME,
    sp.AGENCY,
    sp.METRIC_TYPE,
    sp.METRIC_VALUE,
    sp.BENCHMARK_VALUE,
    sp.PERFORMANCE_STATUS,
    sp.MEASUREMENT_DATE,
    
    -- Time dimensions
    EXTRACT(YEAR FROM sp.MEASUREMENT_DATE) as MEASUREMENT_YEAR,
    EXTRACT(MONTH FROM sp.MEASUREMENT_DATE) as MEASUREMENT_MONTH,
    EXTRACT(WEEK FROM sp.MEASUREMENT_DATE) as MEASUREMENT_WEEK,
    EXTRACT(DOW FROM sp.MEASUREMENT_DATE) as DAY_OF_WEEK,
    
    -- Performance calculations
    CASE 
        WHEN sp.BENCHMARK_VALUE > 0 
        THEN ((sp.METRIC_VALUE - sp.BENCHMARK_VALUE) / sp.BENCHMARK_VALUE) * 100
        ELSE 0 
    END as PERFORMANCE_VS_BENCHMARK_PCT,
    
    CASE 
        WHEN sp.METRIC_VALUE >= sp.BENCHMARK_VALUE THEN 1 
        ELSE 0 
    END as MEETS_BENCHMARK_FLAG,
    
    -- Service categories
    CASE 
        WHEN sp.SERVICE_NAME LIKE '%SingPass%' THEN 'Identity Services'
        WHEN sp.SERVICE_NAME LIKE '%Health%' THEN 'Healthcare Services'
        WHEN sp.SERVICE_NAME LIKE '%Tax%' THEN 'Tax Services'
        WHEN sp.SERVICE_NAME LIKE '%HDB%' THEN 'Housing Services'
        WHEN sp.SERVICE_NAME LIKE '%School%' THEN 'Education Services'
        WHEN sp.SERVICE_NAME LIKE '%Motor%' THEN 'Transport Services'
        WHEN sp.SERVICE_NAME LIKE '%ComCare%' THEN 'Social Services'
        ELSE 'Other Services'
    END as SERVICE_CATEGORY

FROM SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.SERVICE_PERFORMANCE sp;

-- Grant SELECT privileges on the new views for Cortex Analyst
GRANT SELECT ON SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.CITIZEN_SERVICE_ANALYTICS TO ROLE SNOWFLAKE_INTELLIGENCE_ADMIN;
GRANT SELECT ON SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.POLICY_PERFORMANCE_ANALYTICS TO ROLE SNOWFLAKE_INTELLIGENCE_ADMIN;
GRANT SELECT ON SNOWFLAKE_PUBSEC_DEMO.ANALYTICS.SERVICE_PERFORMANCE_ANALYTICS TO ROLE SNOWFLAKE_INTELLIGENCE_ADMIN;

-- Create the semantic model YAML content as a string (this would normally be in a file)
SELECT 'Cortex Analyst views created successfully!' as STATUS,
       'Ready to create semantic model YAML files' as NEXT_STEP,
       'Use the semantic model templates in cortex_analyst_models.yaml' as INSTRUCTION;
